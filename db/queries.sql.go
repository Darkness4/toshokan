// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArchive = `-- name: CreateArchive :exec
INSERT INTO archives (
  title,
  date_added,
  date_updated,
  series,
  date_issued,
  file_path,
  thumbnail_path
) values (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
)
`

type CreateArchiveParams struct {
	Title         pgtype.Text
	DateAdded     pgtype.Timestamptz
	DateUpdated   pgtype.Timestamptz
	Series        pgtype.Text
	DateIssued    pgtype.Date
	FilePath      pgtype.Text
	ThumbnailPath pgtype.Text
}

func (q *Queries) CreateArchive(ctx context.Context, arg CreateArchiveParams) error {
	_, err := q.db.Exec(ctx, createArchive,
		arg.Title,
		arg.DateAdded,
		arg.DateUpdated,
		arg.Series,
		arg.DateIssued,
		arg.FilePath,
		arg.ThumbnailPath,
	)
	return err
}

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (namespace, value)
VALUES ($1, $2)
ON CONFLICT
DO NOTHING
`

type CreateTagParams struct {
	Namespace pgtype.Text
	Value     pgtype.Text
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) error {
	_, err := q.db.Exec(ctx, createTag, arg.Namespace, arg.Value)
	return err
}

const deleteUnusedTags = `-- name: DeleteUnusedTags :exec
DELETE FROM tags WHERE id NOT IN (SELECT tag_id FROM archives_tags)
`

func (q *Queries) DeleteUnusedTags(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteUnusedTags)
	return err
}
